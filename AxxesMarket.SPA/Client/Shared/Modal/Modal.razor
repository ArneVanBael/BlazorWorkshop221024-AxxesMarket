@inherits BlazorStateComponent

<div class="modal" tabindex="-1" role="dialog" style="display:@(Visible ? "block" : "none")">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <button type="button" @onclick=CloseModal class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @BodyContent
            </div>
        </div>
    </div>
</div>

@if(Visible) {
    <div class="modal-backdrop show"></div>
}

@code {
    [Parameter] public string Title { get; set; }
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> OnVisibleChanged { get; set; }
    [Parameter] public RenderFragment BodyContent { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        //await Mediator.Send(new ApplicationState.OpenCloseModalAction(Visible));
    }

    private async Task CloseModal() {
        await OnVisibleChanged.InvokeAsync(false);
        //await Mediator.Send(new ApplicationState.OpenCloseModalAction(false));
    }
}
